[
  {
    "test_name": "e2e_active_products_catalog",
    "question": "What are all the active products in our catalog?",
    "expected": "SELECT product_id, name, sku FROM products WHERE is_active = TRUE",
    "actual": "SELECT product_id, name, sku FROM products WHERE is_active = true",
    "passed": true,
    "execution_time_ms": 58448,
    "overall_score": 10.0,
    "accuracy": 10.0,
    "relevance": 10.0,
    "completeness": 10.0,
    "hallucination": 10.0,
    "judge_assessment": "The actual response is essentially identical to the expected response, with only a minor difference in boolean literal case ('true' vs 'TRUE'). This difference is insignificant as both are valid SQL syntax and functionally equivalent. The query correctly retrieves all active products with the specified columns, fully answering the question with no errors or omissions."
  },
  {
    "test_name": "e2e_active_customers_list",
    "question": "List all customers with their company names and contact emails",
    "expected": "SELECT customer_id, company_name, contact_email FROM customers WHERE is_active = TRUE",
    "actual": "SELECT company_name, contact_email FROM customers",
    "passed": false,
    "execution_time_ms": 61303,
    "overall_score": 8.25,
    "accuracy": 8.0,
    "relevance": 9.0,
    "completeness": 6.0,
    "hallucination": 10.0,
    "judge_assessment": "The response provides a functionally correct SQL query that retrieves the main requested information (company names and contact emails). However, it's incomplete as it omits the customer_id field and lacks the important filtering condition for active customers only. While the core request is addressed, these omissions reduce the completeness and could lead to retrieving unwanted inactive customer records."
  },
  {
    "test_name": "e2e_orders_with_discounts",
    "question": "Find all orders that have products with a discount applied",
    "expected": "SELECT DISTINCT o.order_id, o.order_number, c.company_name AS customer_name, o.order_date FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN order_details od ON o.order_id = od.order_id WHERE od.discount_percentage > 0 ORDER BY o.order_date DESC",
    "actual": "SELECT DISTINCT o.order_id, o.order_number FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE od.discount_percentage > 0",
    "passed": false,
    "execution_time_ms": 63588,
    "overall_score": 8.5,
    "accuracy": 8.5,
    "relevance": 9.0,
    "completeness": 6.5,
    "hallucination": 10.0,
    "judge_assessment": "The actual response provides a functionally correct SQL query that answers the core question of finding orders with discounted products. However, it lacks some useful information (customer name, order date) and ordering that would make it more complete and user-friendly compared to the expected response."
  },
  {
    "test_name": "e2e_orders_by_status_and_currency",
    "question": "What is the breakdown of orders by status and currency?",
    "expected": "SELECT status, currency_code, COUNT(*) AS order_count, SUM(grand_total_amount) AS total_amount FROM orders GROUP BY status, currency_code ORDER BY status, currency_code",
    "actual": "SELECT orders.status, orders.currency_code, COUNT(*) as order_count FROM orders GROUP BY orders.status, orders.currency_code ORDER BY orders.status, orders.currency_code",
    "passed": false,
    "execution_time_ms": 53960,
    "overall_score": 7.75,
    "accuracy": 7.0,
    "relevance": 8.0,
    "completeness": 6.0,
    "hallucination": 10.0,
    "judge_assessment": "The actual response provides a partially correct SQL query that addresses the core question but is incomplete. It correctly groups orders by status and currency and counts them, but misses the important total amount calculation that would provide a complete breakdown. The query is syntactically correct and would execute properly, showing good technical accuracy for what it includes."
  },
  {
    "test_name": "e2e_average_order_value_monthly",
    "question": "What is the average order value by month for the last 6 months?",
    "expected": "SELECT DATE_TRUNC('month', order_date) AS month, AVG(grand_total_amount) AS avg_order_value, COUNT(*) AS order_count FROM orders WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY DATE_TRUNC('month', order_date) ORDER BY month DESC",
    "actual": "SELECT EXTRACT(YEAR FROM orders.order_date) AS year, EXTRACT(MONTH FROM orders.order_date) AS month, AVG(orders.grand_total_amount) AS average_order_value FROM orders WHERE orders.order_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY EXTRACT(YEAR FROM orders.order_date), EXTRACT(MONTH FROM orders.order_date) ORDER BY EXTRACT(YEAR FROM orders.order_date), EXTRACT(MONTH FROM orders.order_date)",
    "passed": false,
    "execution_time_ms": 68991,
    "overall_score": 8.375,
    "accuracy": 7.5,
    "relevance": 9.0,
    "completeness": 7.0,
    "hallucination": 10.0,
    "judge_assessment": "The actual response provides a functionally correct SQL query that answers the question, but has some technical differences from the expected response. The main issues are: 1) The date filtering logic may not align perfectly with \"last 6 months\" depending on interpretation, 2) The output format uses separate year/month columns instead of a formatted month column, and 3) Missing the order count which could be useful context. However, the core functionality of calculating average order value by month is correct."
  },
  {
    "test_name": "e2e_top_customers_by_order_count",
    "question": "Which 20 customers have placed the most orders?",
    "expected": "SELECT c.company_name, COUNT(o.order_id) as order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.company_name ORDER BY order_count DESC LIMIT 20",
    "actual": "SELECT c.customer_id, c.company_name, COUNT(o.order_id) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.company_name ORDER BY order_count DESC LIMIT 20",
    "passed": true,
    "execution_time_ms": 63823,
    "overall_score": 9.75,
    "accuracy": 9.0,
    "relevance": 10.0,
    "completeness": 10.0,
    "hallucination": 10.0,
    "judge_assessment": "The actual response is highly accurate and functional, with only minor differences from the expected response. It correctly answers the question by identifying the 20 customers with the most orders. The use of LEFT JOIN instead of INNER JOIN and inclusion of customer_id are reasonable variations that don't affect the core functionality or correctness of the query."
  },
  {
    "test_name": "e2e_customers_exceeding_credit_limit",
    "question": "Which customers have orders with a total amount exceeding their credit limit?",
    "expected": "SELECT c.customer_id, c.company_name, c.credit_limit, SUM(o.grand_total_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.status NOT IN ('cancelled', 'refunded') GROUP BY c.customer_id, c.company_name, c.credit_limit HAVING SUM(o.grand_total_amount) > c.credit_limit",
    "actual": "SELECT DISTINCT c.customer_id, c.company_name, c.credit_limit, o.order_id, o.order_number, o.grand_total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.grand_total_amount > c.credit_limit ORDER BY c.customer_id, o.grand_total_amount DESC",
    "passed": false,
    "execution_time_ms": 77970,
    "overall_score": 5.0,
    "accuracy": 3.0,
    "relevance": 5.0,
    "completeness": 4.0,
    "hallucination": 8.0,
    "judge_assessment": "The actual response has significant flaws in its approach to the problem. While it attempts to find customers with orders exceeding credit limits, it fundamentally misunderstands the requirement by comparing individual order amounts to credit limits rather than total order amounts. It also lacks proper aggregation and filtering of order statuses, making it incomplete and potentially inaccurate for the intended business logic."
  },
  {
    "test_name": "e2e_top_customers_current_year",
    "question": "Find the top 5 customers by total order amount this year",
    "expected": "SELECT c.customer_id, c.company_name, SUM(o.grand_total_amount) as total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY c.customer_id, c.company_name ORDER BY total_order_amount DESC LIMIT 5",
    "actual": "SELECT c.customer_id, c.company_name, SUM(o.grand_total_amount) AS total_order_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= '2024-01-01' AND o.order_date <= '2024-12-31' GROUP BY c.customer_id, c.company_name ORDER BY total_order_amount DESC LIMIT 5",
    "passed": true,
    "execution_time_ms": 76096,
    "overall_score": 9.875,
    "accuracy": 9.5,
    "relevance": 10.0,
    "completeness": 10.0,
    "hallucination": 10.0,
    "judge_assessment": "The actual response is functionally equivalent to the expected response and correctly answers the question. Both queries achieve the same result of finding the top 5 customers by total order amount for the current year. The actual response uses a slightly different but equally valid approach for filtering by year (hardcoded date range vs. dynamic year extraction) and uses INNER JOIN instead of JOIN, but these are stylistic differences that don't affect correctness or functionality."
  },
  {
    "test_name": "e2e_product_total_quantities",
    "question": "What is the total quantity ordered for each product?",
    "expected": "SELECT p.product_id, p.name AS product_name, p.sku, SUM(od.quantity) AS total_quantity_ordered FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.name, p.sku ORDER BY total_quantity_ordered DESC",
    "actual": "SELECT p.product_id, p.name, SUM(od.quantity) AS total_quantity_ordered FROM order_details od JOIN products p ON od.product_id = p.product_id GROUP BY p.product_id, p.name ORDER BY total_quantity_ordered DESC",
    "passed": true,
    "execution_time_ms": 63835,
    "overall_score": 9.5,
    "accuracy": 9.5,
    "relevance": 10.0,
    "completeness": 8.5,
    "hallucination": 10.0,
    "judge_assessment": "The actual response is highly accurate and functional, correctly answering the question with proper SQL syntax and logic. The only minor difference is the exclusion of the SKU field, which doesn't affect the core functionality but makes the response slightly less complete than the expected version."
  },
  {
    "test_name": "e2e_highest_revenue_product",
    "question": "Show me the product with the highest total revenue",
    "expected": "SELECT p.product_id, p.name AS product_name, p.sku, SUM(od.quantity * od.final_unit_price) AS total_revenue FROM products p JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id, p.name, p.sku ORDER BY total_revenue DESC LIMIT 1",
    "actual": "SELECT p.product_id, p.name, SUM(od.quantity * od.final_unit_price) AS total_revenue FROM products p JOIN order_details od ON od.product_id = p.product_id GROUP BY p.product_id, p.name ORDER BY total_revenue DESC LIMIT 1",
    "passed": true,
    "execution_time_ms": 71206,
    "overall_score": 9.5,
    "accuracy": 9.5,
    "relevance": 10.0,
    "completeness": 8.5,
    "hallucination": 10.0,
    "judge_assessment": "The actual response is highly accurate and functional, correctly answering the question with proper SQL syntax and logic. The only minor difference is the exclusion of the SKU field, which doesn't affect the core functionality but makes the response slightly less complete than the expected version."
  }
]